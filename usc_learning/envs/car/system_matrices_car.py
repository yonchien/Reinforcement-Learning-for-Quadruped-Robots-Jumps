import numpy as np
from sys import path
path.append(r"/home/guillaume/Documents/casadi-linux-py36-v3.5.1-64bit")
from casadi import *
# from matlab to python make sure to change [; .* ./ .^]


def D_wlag_simple_rc(J1,J4,Jb,b_length,b_width,m1,m2,m3,m4,mb,thb,thf):
# %D_WLAG_SIMPLE_RC
# %    DNEW2 = D_WLAG_SIMPLE_RC(J1,J4,JB,B_LENGTH,B_WIDTH,M1,M2,M3,M4,MB,THB,THF)

# %    This function was generated by the Symbolic Math Toolbox version 8.1.
# %    14-May-2019 10:20:50

	D = np.array([m1+m2+m3+m4+mb,0.0,b_width*m1*cos(thb)*(1.0/2.0)+b_width*m2*cos(thb)*(1.0/2.0)-b_width*m3*cos(thb)*(1.0/2.0)-b_width*m4*cos(thb)*(1.0/2.0)-b_length*m1*sin(thb)*(1.0/2.0)+b_length*m2*sin(thb)*(1.0/2.0)+b_length*m3*sin(thb)*(1.0/2.0)-b_length*m4*sin(thb)*(1.0/2.0),0.0,-sin(thb+thf),-sin(thb),0.0,m1+m2+m3+m4+mb,b_length*m1*cos(thb)*(1.0/2.0)-b_length*m2*cos(thb)*(1.0/2.0)-b_length*m3*cos(thb)*(1.0/2.0)+b_length*m4*cos(thb)*(1.0/2.0)+b_width*m1*sin(thb)*(1.0/2.0)+b_width*m2*sin(thb)*(1.0/2.0)-b_width*m3*sin(thb)*(1.0/2.0)-b_width*m4*sin(thb)*(1.0/2.0),0.0,cos(thb+thf),cos(thb),b_width*m1*cos(thb)*(1.0/2.0)+b_width*m2*cos(thb)*(1.0/2.0)-b_width*m3*cos(thb)*(1.0/2.0)-b_width*m4*cos(thb)*(1.0/2.0)-b_length*m1*sin(thb)*(1.0/2.0)+b_length*m2*sin(thb)*(1.0/2.0)+b_length*m3*sin(thb)*(1.0/2.0)-b_length*m4*sin(thb)*(1.0/2.0),b_length*m1*cos(thb)*(1.0/2.0)-b_length*m2*cos(thb)*(1.0/2.0)-b_length*m3*cos(thb)*(1.0/2.0)+b_length*m4*cos(thb)*(1.0/2.0)+b_width*m1*sin(thb)*(1.0/2.0)+b_width*m2*sin(thb)*(1.0/2.0)-b_width*m3*sin(thb)*(1.0/2.0)-b_width*m4*sin(thb)*(1.0/2.0),J1+J4+Jb+b_length**2*m1*(1.0/4.0)+b_length**2*m2*(1.0/4.0)+b_length**2*m3*(1.0/4.0)+b_length**2*m4*(1.0/4.0)+b_width**2*m1*(1.0/4.0)+b_width**2*m2*(1.0/4.0)+b_width**2*m3*(1.0/4.0)+b_width**2*m4*(1.0/4.0),J1+J4,b_length*cos(thf)*(1.0/2.0)-b_width*sin(thf)*(1.0/2.0),b_length*(-1.0/2.0),0.0,0.0,J1+J4,J1+J4,0.0,0.0,sin(thb+thf),-cos(thb+thf),b_length*cos(thf)*(-1.0/2.0)+b_width*sin(thf)*(1.0/2.0),0.0,0.0,0.0,sin(thb),-cos(thb),b_length*(1.0/2.0),0.0,0.0,0.0]).reshape((6,6),order="F")

	return D

def C_wlag_simple_rc(b_length,b_width,dthb,dthf,dxb,dyb,m1,m2,m3,m4,thb,thf):
# %C_WLAG_SIMPLE_RC
# %    CNEW2 = C_WLAG_SIMPLE_RC(B_LENGTH,B_WIDTH,DTHB,DTHF,DXB,DYB,M1,M2,M3,M4,THB,THF)

# %    This function was generated by the Symbolic Math Toolbox version 8.1.
# %    14-May-2019 10:20:51

	C = np.array([dthb**2*(b_length*m1*cos(thb)-b_length*m2*cos(thb)-b_length*m3*cos(thb)+b_length*m4*cos(thb)+b_width*m1*sin(thb)+b_width*m2*sin(thb)-b_width*m3*sin(thb)-b_width*m4*sin(thb))*(-1.0/2.0),dthb**2*(b_width*m1*cos(thb)+b_width*m2*cos(thb)-b_width*m3*cos(thb)-b_width*m4*cos(thb)-b_length*m1*sin(thb)+b_length*m2*sin(thb)+b_length*m3*sin(thb)-b_length*m4*sin(thb))*(1.0/2.0),0.0,0.0,-dthb*dxb*cos(thb+thf)-dthf*dxb*cos(thb+thf)-dthb*dyb*sin(thb+thf)-dthf*dyb*sin(thb+thf)-b_width*dthb*dthf*cos(thf)*(1.0/2.0)-b_length*dthb*dthf*sin(thf)*(1.0/2.0),-dthb*(dxb*cos(thb)+dyb*sin(thb))]).reshape((6,1))

	return C

def Bu_w_lag_simple_rc(b_length,b_width,thb,thf,u_steering,u_wheels):
# %BU_W_LAG_SIMPLE_RC
# %    BUNEW2 = BU_W_LAG_SIMPLE_RC(B_LENGTH,B_WIDTH,THB,THF,U_STEERING,U_WHEELS)

# %    This function was generated by the Symbolic Math Toolbox version 8.1.
# %    14-May-2019 10:20:51

	Bu = np.array([u_wheels*(cos(thb)*cos(thf)-sin(thb)*sin(thf))*2.0+u_wheels*cos(thb)*2.0,u_wheels*(cos(thb)*sin(thf)+cos(thf)*sin(thb))*2.0+u_wheels*sin(thb)*2.0,u_wheels*(cos(thb)*sin(thf)+cos(thf)*sin(thb))*(b_length*cos(thb)*(1.0/2.0)-b_width*sin(thb)*(1.0/2.0))+u_wheels*(cos(thb)*sin(thf)+cos(thf)*sin(thb))*(b_length*cos(thb)*(1.0/2.0)+b_width*sin(thb)*(1.0/2.0))+u_wheels*(cos(thb)*cos(thf)-sin(thb)*sin(thf))*(b_width*cos(thb)*(1.0/2.0)-b_length*sin(thb)*(1.0/2.0))-u_wheels*(cos(thb)*cos(thf)-sin(thb)*sin(thf))*(b_width*cos(thb)*(1.0/2.0)+b_length*sin(thb)*(1.0/2.0))-u_wheels*cos(thb)*(b_width*cos(thb)*(1.0/2.0)-b_length*sin(thb)*(1.0/2.0))+u_wheels*cos(thb)*(b_width*cos(thb)*(1.0/2.0)+b_length*sin(thb)*(1.0/2.0))-u_wheels*sin(thb)*(b_length*cos(thb)*(1.0/2.0)-b_width*sin(thb)*(1.0/2.0))-u_wheels*sin(thb)*(b_length*cos(thb)*(1.0/2.0)+b_width*sin(thb)*(1.0/2.0)),u_steering,0.0,0.0]).reshape((6,1))

	return Bu

